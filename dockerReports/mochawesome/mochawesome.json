{
  "stats": {
    "suites": 2,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2022-11-21T02:08:11.758Z",
    "end": "2022-11-21T02:08:15.207Z",
    "duration": 3449,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "aba357d7-05c6-43c1-b744-da58558c608d",
      "title": "",
      "fullFile": "cypress/e2e/apiMovies.cy.js",
      "file": "cypress/e2e/apiMovies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
          "title": "Testing GET top-rated Movies API",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET top rated movies with default page 1 result",
              "fullTitle": "Testing GET top-rated Movies API GET top rated movies with default page 1 result",
              "timedOut": null,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${apiUrl}movie/top_rated`,\n  qs: {\n    api_key: api_Key\n  }\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.page).to.eq(1);\n});",
              "err": {},
              "uuid": "bd6fdccc-6d7a-42f1-b48c-8f8ac24ceb79",
              "parentUUID": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should display error message code 401 GET top rated movies with incorrect api_key",
              "fullTitle": "Testing GET top-rated Movies API Should display error message code 401 GET top rated movies with incorrect api_key",
              "timedOut": null,
              "duration": 267,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${apiUrl}movie/top_rated`,\n  qs: {\n    api_key: 'dasdsasddsaasddsaadsdsa'\n  },\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(401);\n  expect(response.body.page).not.exist;\n});",
              "err": {},
              "uuid": "d92199ba-3be8-49eb-ba35-8eda1025324b",
              "parentUUID": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should not GET top rated movies with page=0",
              "fullTitle": "Testing GET top-rated Movies API Should not GET top rated movies with page=0",
              "timedOut": null,
              "duration": 264,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${apiUrl}movie/top_rated`,\n  qs: {\n    api_key: api_Key,\n    page: apiData.topRated.pageZero\n  },\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(422);\n});",
              "err": {},
              "uuid": "b8d76509-12af-4fd7-8aaf-d509694349d6",
              "parentUUID": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should GET top rated movies with max page",
              "fullTitle": "Testing GET top-rated Movies API Should GET top rated movies with max page",
              "timedOut": null,
              "duration": 84,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${apiUrl}movie/top_rated`,\n  qs: {\n    api_key: api_Key,\n    page: apiData.topRated.pageMax\n  },\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.page).to.eq(apiData.topRated.pageMax);\n});",
              "err": {},
              "uuid": "a5575fe5-24eb-48bf-bfbc-3f36339c00ff",
              "parentUUID": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should GET top rated movies with random page between 1-500",
              "fullTitle": "Testing GET top-rated Movies API Should GET top rated movies with random page between 1-500",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: `${apiUrl}movie/top_rated`,\n  qs: {\n    api_key: api_Key,\n    page: randomNumber\n  },\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.page).to.eq(randomNumber);\n  movieId = response.body.results[0].id;\n});",
              "err": {},
              "uuid": "8a68cebf-19ab-4729-bb57-b58f3e175d44",
              "parentUUID": "128c6e1b-63de-42c7-92cb-dd0fffde7b11",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bd6fdccc-6d7a-42f1-b48c-8f8ac24ceb79",
            "d92199ba-3be8-49eb-ba35-8eda1025324b",
            "b8d76509-12af-4fd7-8aaf-d509694349d6",
            "a5575fe5-24eb-48bf-bfbc-3f36339c00ff",
            "8a68cebf-19ab-4729-bb57-b58f3e175d44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1434,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "43289a84-a957-4aa0-ad73-16406d9cf408",
          "title": "Testing POST rate-Movies API tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "POST rate movies with random movieId everytime",
              "fullTitle": "Testing POST rate-Movies API tests POST rate movies with random movieId everytime",
              "timedOut": null,
              "duration": 349,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${apiUrl}movie/${movieId}/rating`,\n  qs: {\n    api_key: api_Key\n  },\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: body,\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body.success).to.eq(true);\n});",
              "err": {},
              "uuid": "f6f8559d-e67f-4919-837e-631d34dbf26f",
              "parentUUID": "43289a84-a957-4aa0-ad73-16406d9cf408",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST with incorrect movieId reponse code should be 404",
              "fullTitle": "Testing POST rate-Movies API tests POST with incorrect movieId reponse code should be 404",
              "timedOut": null,
              "duration": 525,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let wrongMovieId = \"adasddsaasdads\";\ncy.request({\n  method: 'POST',\n  url: `${apiUrl}movie/${wrongMovieId}/rating`,\n  qs: {\n    api_key: api_Key\n  },\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: body,\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(404);\n  expect(response.body.success).to.eq(false);\n});",
              "err": {},
              "uuid": "a6a3aeb6-ca10-4a50-89e8-562bc54669ba",
              "parentUUID": "43289a84-a957-4aa0-ad73-16406d9cf408",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST without token then reponse code should be 401",
              "fullTitle": "Testing POST rate-Movies API tests POST without token then reponse code should be 401",
              "timedOut": null,
              "duration": 499,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${apiUrl}movie/${movieId}/rating`,\n  qs: {\n    api_key: api_Key\n  },\n  headers: {\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: body,\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(401);\n  expect(response.body.success).to.eq(false);\n});",
              "err": {},
              "uuid": "d8698738-6ba7-4e78-b701-d08fc0126f4e",
              "parentUUID": "43289a84-a957-4aa0-ad73-16406d9cf408",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST with incorrect rating not multiple of 0.5 then reponse code should be 400",
              "fullTitle": "Testing POST rate-Movies API tests POST with incorrect rating not multiple of 0.5 then reponse code should be 400",
              "timedOut": null,
              "duration": 521,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: `${apiUrl}movie/${movieId}/rating`,\n  qs: {\n    api_key: api_Key\n  },\n  headers: {\n    'Authorization': token,\n    'Content-Type': 'application/json; charset=utf-8'\n  },\n  body: bodyWrong,\n  failOnStatusCode: false\n}).should(response => {\n  expect(response.status).to.eq(400);\n  expect(response.body.success).to.eq(false);\n  expect(response.body.status_code).to.eq(18);\n});",
              "err": {},
              "uuid": "1ed89479-b23c-4652-bb94-6c3c726f7402",
              "parentUUID": "43289a84-a957-4aa0-ad73-16406d9cf408",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6f8559d-e67f-4919-837e-631d34dbf26f",
            "a6a3aeb6-ca10-4a50-89e8-562bc54669ba",
            "d8698738-6ba7-4e78-b701-d08fc0126f4e",
            "1ed89479-b23c-4652-bb94-6c3c726f7402"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1894,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}